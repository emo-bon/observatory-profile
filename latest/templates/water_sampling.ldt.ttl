{#- 
Template: water_sampling.ldt.ttl.j2 
Description: Template to generate triples from water_sampling.csv data collected in context of EMOBON.
Input: observatory-{obs_id}-crate/logsheets-transformed/sediment_sampling.csv
Sets:   
    - observatory-{obs_id}-crate/logsheets-transformed/sediment_observatory.csv as observatory 
-#}

{% include './includes/prefixes.ttl' %}

{%- for observatory in sets['observatory'] %}
@base <http://data.emobon.embrc.eu/observatory-{{observatory.obs_id|lower}}-crate/{{observatory.env_package}}/sampling-event/{{_.sampling_event.split(' ') |join("_")}}> . {# baseref ~ http://data.emobon.embrc.eu #}

{#- SAMPLING EVENT -#}
<>
    a sosa:Sampling, prov:Activity ;  
    {# provenance part #}
    dct:type "sampling"^^xsd:string ; 
    {%- if _.collection_date and _.collection_date != "NA" %}
    prov:startedAtTime {{_.collection_date | xsd("auto-date") | safe }} ; {#ValueError: ISO string too short with xsd:date#}
    {%- endif %}
    prov:wasAssociatedWith [
        a prov:Person, schema:Person ;
        {%- if _.sampl_person != "NA" %}
        schema:name {{ _.sampl_person | xsd("string") | safe }} ;
        {%- endif %}
        {%- if _.sampl_person_orcid and _.sampl_person_orcid != "NA" %}
        schema:identifier {{_.sampl_person_orcid | xsd("anyURI") | safe }} ;
        {%- endif %}
    ] ;
    {# properties #}
    {%- if _.collection_date and _.collection_date != "NA" %}
    sosa:resultTime {{ _.collection_date | xsd("auto-date") | safe }} ; {#xsd:dateTime not supported#}
    {%- endif %}
    {%- if _.samp_collect_device != "NA" %}    
    sosa:madeBySampler {{ _.samp_collect_device | xsd("string") | safe }} ;
    {%- endif %}
    {%- if _.samp_mat_process != "NA" or _.samp_mat_process_dev != "NA" %}
    sosa:usedProcedure [
        a sosa:Procedure ; 
        {%- if _.samp_mat_process != "NA" %}
        rdfs:label {{ _.samp_mat_process | xsd("string") | safe }} ;
        {%- endif %}
        {%- if _.samp_mat_process_dev != "NA" %}
        rdfs:comment {{ _.samp_mat_process_dev | xsd("string") | safe }} ; 
        {%- endif %}
        rdfs:seeAlso "http://dx.doi.org/10.25607/OBP-1653"^^xsd:anyURI ;
        ] ;
    {%- endif %}
    {%- if _.tidal_stage != "NA" %}
    emobon-sampling:tidalStage {{_.tidal_stage | xsd("string") | safe }} ;
    {%- endif %}
    {%- if _.depth and _.depth != "NA" %}
        {%- if _.depth.startswith('>')%} {#case 1: > #}
    emobon-sampling:minSamplingDepth [
        a qudt:QuantityValue ;
        qudt:numericValue {{ _.depth | xsd("double") | safe }} ; 
        {%- for row in sets['schema']%}
            {%- if row['LogsheetColumnTitle'] == 'depth' %}
                {%- if row['Unit_URL'] and row['Unit_URL'] != "NA" %}
        qudt:unit <{{row['Unit_URL'].strip() | safe }}> ;
                {%- elif row['Unit'] and row['Unit'] != "NA" %}
        qudt:unit {{row['Unit'].strip() | xsd('string') | safe }} ;
                {%- endif %} 
            {%- endif %}
        {%- endfor %} 
        ] ; 
        {%- elif _.depth.startswith('<')%} {#case 2: < #}
    emobon-sampling:maxSamplingDepth [
        a qudt:QuantityValue ;
        qudt:numericValue {{ _.depth | xsd("double") | safe }} ; 
        {%- for row in sets['schema']%}
            {%- if row['LogsheetColumnTitle'] == 'depth' %}
                {%- if row['Unit_URL'] and row['Unit_URL'] != "NA" %}
        qudt:unit <{{row['Unit_URL'].strip() | safe }}> ;
                {%- elif row['Unit'] and row['Unit'] != "NA" %}
        qudt:unit {{row['Unit'].strip() | xsd('string') | safe }} ;
                {%- endif %} 
            {%- endif %}
        {%- endfor %} 
        ] ; 
        {%- elif '-' in _.depth %} {# case 3: range x-y/x-x (assuming smallest always first) #}
            {% set x,y = _.depth.split('-') %}
    emobon-sampling:minSamplingDepth [
        a qudt:QuantityValue ;
        qudt:numericValue {{ x | xsd("double") | safe }} ; 
        {%- for row in sets['schema']%}
            {%- if row['LogsheetColumnTitle'] == 'depth' %}
                {%- if row['Unit_URL'] and row['Unit_URL'] != "NA" %}
        qudt:unit <{{row['Unit_URL'].strip() | safe }}> ;
                {%- elif row['Unit'] and row['Unit'] != "NA" %}
        qudt:unit {{row['Unit'].strip() | xsd('string') | safe }} ;
                {%- endif %} 
            {%- endif %}
        {%- endfor %} 
        ] ; 
    emobon-sampling:maxSamplingDepth [
        a qudt:QuantityValue ;
        qudt:numericValue {{ y | xsd("double") | safe }} ; 
        {%- for row in sets['schema']%}
            {%- if row['LogsheetColumnTitle'] == 'depth' %}
                {%- if row['Unit_URL'] and row['Unit_URL'] != "NA" %}
        qudt:unit <{{row['Unit_URL'].strip() | safe }}> ;
                {%- elif row['Unit'] and row['Unit'] != "NA" %}
        qudt:unit {{row['Unit'].strip() | xsd('string') | safe }} ;
                {%- endif %} 
            {%- endif %}
        {%- endfor %} 
        ] ; 
        {%- else %} {# case 4: single value #}
    emobon-sampling:minSamplingDepth [
        a qudt:QuantityValue ;
        qudt:numericValue {{ _.depth | xsd("double") | safe }} ; 
        {%- for row in sets['schema']%}
            {%- if row['LogsheetColumnTitle'] == 'depth' %}
                {%- if row['Unit_URL'] and row['Unit_URL'] != "NA" %}
        qudt:unit <{{row['Unit_URL'].strip() | safe }}> ;
                {%- elif row['Unit'] and row['Unit'] != "NA" %}
        qudt:unit {{row['Unit'].strip() | xsd('string') | safe }} ;
                {%- endif %} 
            {%- endif %}
        {%- endfor %} 
        ] ; 
    emobon-sampling:maxSamplingDepth [
        a qudt:QuantityValue ;
        qudt:numericValue {{ _.depth | xsd("double") | safe }} ; 
        {%- for row in sets['schema']%}
            {%- if row['LogsheetColumnTitle'] == 'depth' %}
                {%- if row['Unit_URL'] and row['Unit_URL'] != "NA" %}
        qudt:unit <{{row['Unit_URL'].strip() | safe }}> ;
                {%- elif row['Unit'] and row['Unit'] != "NA" %}
        qudt:unit {{row['Unit'].strip() | xsd('string') | safe }} ;
                {%- endif %} 
            {%- endif %}
        {%- endfor %} 
        ] ; 
        {%- endif %}
    {#emobon-sampling:samplingDepth {{ _.depth | xsd("string") | safe }} ; #}    {%- endif %}
    {%- if observatory.tot_depth_water_col != "NA" %}
    emobon-core:waterColumnDepth {{observatory.tot_depth_water_col | xsd("string") | safe }} ; {#info from observ file - better suited here#}
    {%- endif %}
    {%- if observatory.geo_loc_name != "NA" %}
    emobon-core:originCountry {{observatory.geo_loc_name | xsd("string") | safe }} ; 
    {%- endif %}
    {# features of interest #}
    {%- if _.env_material != "NA" %}
    emobon-sampling:environmentMaterial {% for item in _.env_material.split(';') %}{{item.strip() | xsd("anyURI") | safe }}{% if not loop.last %}, {%endif%}{% endfor %};
    {%- endif %}
    {%- if _.investigation_type != "NA" %}
    emobon-sampling:investigationType {{_.investigation_type | xsd("string") | safe }} ;
    {%- endif %}
    {%- if _.tax_id != "NA" %}
    emobon-sampling:taxonomicID {{_.tax_id | xsd("anyURI") | safe }} ;
    {%- endif %}
    {%- if _.scientific_name != "NA" %}
    emobon-sampling:taxonomicName {{_.scientific_name | xsd("string") | safe }} ;
    {%- endif %}
    {%- if _.comm_samp != "NA" %}
    emobon-sampling:bioCommunity {{ _.comm_samp | xsd("string") | safe }} ; 
    {%- endif %}
    {# linked to observatory #}
    emobon-sampling:linkedToObservatory </observatory-{{observatory.obs_id|lower}}-crate/{{observatory.env_package}}/observatory/{{observatory.obs_id}}>  ; 
.
{%- endfor %}