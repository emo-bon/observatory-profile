{#- 
Template: sediment_measured.ldt.ttl.j2 
Description: Template to generate triples from sediment_measured.csv data collected in context of EMOBON.
Input: 
    - observatory-{obs_id}-crate/logsheets-transformed/sediment_measured.csv
Sets:   
    - observatory-{obs_id}-crate/logsheets-transformed/sediment_observatory.csv as observatory
    - observatory-profile/logsheet_schema_extended.csv as schema 
Output: 
    - observatory-{obs_id}-crate/rdf/sediment/measured/{source_mat_id}.ttl
-#}

{%- include './includes/prefixes.ttl' %}

{#Observations made from the Sample#}
{%- for observatory in sets['observatory'] %}
@base <http://data.emobon.embrc.eu/observatory-{{observatory.obs_id|lower}}-crate/{{observatory.env_package}}/observation/{{_.source_mat_id}}> . {# baseref ~ http://data.emobon.embrc.eu #}

{%- for row in sets['schema']%}
{%- if row['LogsheetTab'] == 'Measured' and not row['LogsheetColumnTitle'].endswith('_method') and _[row['LogsheetColumnTitle']] and _[row['LogsheetColumnTitle']] != "NA"  %}

{#- here we make the disinction between measurement columns with single value entries and multiple value entries #}
{%- if "; " in _[row['LogsheetColumnTitle']] %} {# multiple value entries ~ lists of structure 'name: value; name: value; ...'#}
{#- need to split into array & loop -> each item ~ observation #}
    {%- set measurements_list = _[row['LogsheetColumnTitle']].split('; ') %}
    {%- for meas in measurements_list %}
        {%- set meas_name = meas.split(': ')[0] %}
        {%- set meas_value = meas.split(': ')[-1] %}

<#{{meas_name.strip()}}>
    a sosa:Observation, schema:Observation ; 
    
    sosa:observedProperty [
        a sosa:ObservableProperty ; 
        {%- if row['Observable_property_url'] and row['Observable_property_url'] != "NA" %}
        dct:identifier <{{ row['Observable_property_url'].strip() | safe }}> ;
        {%- endif %}
        rdfs:label {{ row['LogsheetColumnTitle'] | xsd("string") | safe }} ;
        dct:type {{meas_name.strip() | xsd("string") | safe }} ;
    ] ; 
    
    sosa:hasResult [
        a sosa:Result , qudt:QuantityValue ; 
        qudt:numericValue {{ meas_value | xsd("double") | safe }} ;
        {%- if row['Unit_URL'] and row['Unit_URL'] != "NA" %}
        qudt:unit <{{row['Unit_URL'].strip() | safe }}> ;
        {%- elif row['Unit'] and row['Unit'] != "NA" %}
        qudt:unit {{row['Unit'].strip() | xsd('string') | safe }} ;
        {%- endif %}
    ] ; 

    {%- if row['LogsheetColumnTitle']+'_method' and _[row['LogsheetColumnTitle']+'_method'] and _[row['LogsheetColumnTitle']+'_method'] != "NA" %}
    schema:measurementTechnique {{ _[row['LogsheetColumnTitle']+'_method'] | xsd("string") | safe }} ; 
    {%- endif %}

    {#- link back to sample uri (see sediment_sample.ldt.ttl) #}
    sosa:hasFeatureOfInterest </observatory-{{observatory.obs_id|lower}}-crate/{{observatory.env_package}}/sample/{{_.source_mat_id}}> ; 
.
    {%- endfor %}

{% else %} {#- single value entries #}
<#{{row['LogsheetColumnTitle'].strip()}}>
    a sosa:Observation, schema:Observation ; 
    {%- if row['Observable_property_url'] and row['Observable_property_url'] != "NA" %}
    sosa:observedProperty [
        a sosa:ObservableProperty ; 
        dct:identifier <{{ row['Observable_property_url'].strip() | safe }}> ;
        rdfs:label {{row['LogsheetColumnTitle'].strip() | xsd("string") | safe }} ; 
    ] ; 
    {%- else %}
    sosa:observedProperty [
        a sosa:ObservableProperty ; 
        rdfs:label {{ row['LogsheetColumnTitle'].strip() | xsd("string") | safe }} ;
    ] ;
    {%- endif %}
    
    sosa:hasResult [
        a sosa:Result , qudt:QuantityValue ; 
        {%- if _[row['LogsheetColumnTitle']] != "NA" %}
            {%- if row['DataTypeOut'] == "xsd:float" and "Expected" not in _[row['LogsheetColumnTitle']] %}
        qudt:numericValue {{ _[row['LogsheetColumnTitle']] | xsd("double") | safe }} ;
            {%- elif row['DataTypeOut'] == "xsd:string" %}
        qudt:numericValue {{ _[row['LogsheetColumnTitle']] | xsd("string") | safe }} ; {#values are mix of strings and numbers#}
            {#- to do include xsd:list -#}
            {%- endif %}
        {%- endif %}
        {%- if row['Unit_URL'] and row['Unit_URL'] != "NA" %}
        qudt:unit <{{row['Unit_URL'].strip() | safe }}> ;
        {%- elif row['Unit'] and row['Unit'] != "NA" %}
        qudt:unit {{row['Unit'].strip() | xsd('string') | safe }} ;
        {%- endif %}
    ] ; 

    {%- if row['LogsheetColumnTitle']+'_method' and _[row['LogsheetColumnTitle']+'_method'] and _[row['LogsheetColumnTitle']+'_method'] != "NA" %}
    schema:measurementTechnique {{ _[row['LogsheetColumnTitle']+'_method'] | xsd("string") | safe }} ; 
    {%- endif %}

    {#- link back to sample uri (see sediment_sample.ldt.ttl) #}
    sosa:hasFeatureOfInterest </observatory-{{observatory.obs_id|lower}}-crate/{{observatory.env_package}}/sample/{{_.source_mat_id}}> ; 
.
{%- endif %}

{%- endif %}
{%- endfor %}

{%- endfor %}
