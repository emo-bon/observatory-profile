{#- 
Template: sediment_sampling.ldt.ttl.j2 
Input: /observatory-bpns-data/downloads/gdoc-csv/sediment_sampling.csv
Sets:   
    - observatory-bpns-data/downloads/gdoc-csv/sediment_observatory.csv as observatory
Description: Template to generate triples from {SampleType}_sampling.csv data collected in context of EMOBON.
-#}

{%- if ctrl.isFirst -%} 
{% include 'includes/prefixes.ttl' %}
{%- endif %}

{% for observatory in sets['observatory'] %}
@base <{{baseref}}/emobon/sampling/{{observatory.obs_id}}/{{observatory.env_package}}/{{_.sampling_event.split(' ') |join("_")}}> . {# baseref ~ http://data.emobon.embrc.eu #}

{#- SAMPLING EVENT -#}
<> 
    a sosa:Sampling, prov:Activity ;  
    {# provenance part #}
    dct:type "sampling"^^xsd:string ; 
    prov:startedAtTime {{_.collection_date | ttl("xsd:string") | safe }} ; {#ValueError: ISO string too short with xsd:date#}
    prov:wasAssociatedWith [
        a prov:Person, schema:Person ;
        schema:name {{ _.sampl_person | ttl("xsd:string") | safe }} ;
        {%- if _.sampl_person_orcid %}
        schema:identifier {{_.sampl_person_orcid | ttl("xsd:anyURI") | safe }} ;
        {%- endif %}
    ] ;
    {# properties #}
    sosa:resultTime {{ _.collection_date | ttl("xsd:string") | safe }} ; {#xsd:dateTime not supported#}
    sosa:madeBySampler {{ _.samp_collect_device | ttl("xsd:string") | safe }} ; 
    sosa:usedProcedure [
        a sosa:Procedure ; 
        rdfs:label {{ _.samp_mat_process | ttl("xsd:string") | safe }} ;
        rdfs:comment {{ _.samp_mat_process_dev | ttl("xsd:string") | safe }} ; 
        ] ; 
    emobon:tidalStage {{_.tidal_stage | ttl("xsd:string") | safe }} ;
    {%- if _.depth %}
    emobon:samplingDepth {{ _.depth | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
    {%- endif %}
    emobon:waterColumnDepth {{observatory.tot_depth_water_col | ttl("xsd:string") | safe }} ; {#info from observ file - better suited here#}
    emobon:originCountry {{observatory.geo_loc_name | ttl("xsd:string") | safe }} ; 
    {# features of interest #}
    {%- if _.env_material %}
    sosa:hasFeatureOfInterest {% for item in _.env_material.split(';') %}{{item.strip() | ttl("xsd:string") | safe }}{% if not loop.last %}, {%endif%}{% endfor %};
    {%- endif %}
    {%- if _.investigation_type %}
    sosa:hasFeatureOfInterest {{_.investigation_type | ttl("xsd:string") | safe }} ;
    {%- endif %}
    {%- if _.tax_id %}
    sosa:hasFeatureOfInterest {{_.tax_id | ttl("xsd:anyURI") | safe }} ;
    {%- endif %} {# scientific_name is name associated with this #}
    {%- if _.comm_samp %}
    sosa:hasFeatureOfInterest {{ _.comm_samp | ttl("xsd:string") | safe }} ; 
    {%- endif %}
    {# result sample ~ sample from which observations are made #}
    sosa:hasResult </emobon/sample/{{observatory.obs_id}}/{{observatory.env_package}}/{{_.sampling_event.split(' ') |join("_")}}> ;
.

{#- SAMPLE from which observations are made #}
</emobon/sample/{{observatory.obs_id}}/{{observatory.env_package}}/{{_.sampling_event.split(' ') |join("_")}}>
    a sosa:Sample, prov:Entity ;
    {# features of interest #}
    {%- if _.env_material %}
    sosa:isSampleOf {% for item in _.env_material.split(';') %}{{item.strip() | ttl("xsd:string") | safe }}{% if not loop.last %}, {%endif%}{% endfor %};
    {%- endif %}
    {%- if _.investigation_type %}
    sosa:isSampleOf {{_.investigation_type | ttl("xsd:string") | safe }} ;
    {%- endif %}
    {%- if _.tax_id %}
    sosa:isSampleOf {{_.tax_id | ttl("xsd:anyURI") | safe }} ; 
    {%- endif %} {# scientific_name is name associated with this #}
    {%- if _.comm_samp %}
    sosa:isSampleOf {{ _.comm_samp | ttl("xsd:string") | safe }} ; 
    {%- endif %}
    {# result sample replicates #}
    sosa:hasResult </emobon/sample/{{observatory.obs_id}}/{{observatory.env_package}}/{{_.source_mat_id}}> ;
.

{#- SAMPLE replicate #}
</emobon/sample/{{observatory.obs_id}}/{{observatory.env_package}}/{{_.source_mat_id}}>
    a sosa:Sample, prov:Entity ;
    {# properties #}
    rdfs:label {{ _.source_mat_id_orig | ttl("xsd:string") | safe }} ; 
    dct:description {{ _.samp_description | ttl("xsd:string") | safe }} ; 
    {%- if _.ENA_accession_number_sample %}
    emobon:enaSampleAccNum {{_.ENA_accession_number_sample | ttl("xsd:anyURI") | safe }} ;
    {%- endif %}
    emobon:sampleReplicate {{ _.replicate | ttl("xsd:string") | safe }} ;
    {%- if _.long_store == "Y" %}
    emobon:longStorage 'true'^^xsd:boolean ; 
    {%- endif %}
    {%- if _.long_store == "N" %}
    emobon:longStorage 'false'^^xsd:boolean ; 
    {%- endif %}
    {%- if _.failure == 'T' %}
    emobon:failure 'true'^^xsd:boolean ;
    emobon:failureComment {{ _.failure_comment | ttl("xsd:string") | safe }} ;
    {%- endif %}
    {%- if _.failure == 'F' %}
    emobon:failure 'false'^^xsd:boolean ;
    {%- endif %}
    {%- if _.depth %}
    emobon:sampleDepth {{ _.depth | ttl("xsd:string") | safe }} ; 
    {%- endif %}
    {%- if _.samp_size_mass %}
    emobon:hasSampleSize {{ _.samp_size_mass | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
    {%- endif %}
    {%- if _.size_frac %}
    emobon:filterSizeRange {{ _.size_frac | ttl("xsd:string") | safe }} ;
    {%- endif %}
    {%- if _.size_frac_up %}
    emobon:upperFilterSize {{ _.size_frac_up | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
    {%- endif %}
    {%- if _.size_frac_low %}
    emobon:lowerFilterSize {{ _.size_frac_low | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
    {%- endif %}
    {# features of interest #}
    {%- if _.env_material %}
    sosa:isSampleOf {%- for item in _.env_material.split(';') %}{{item.strip() | ttl("xsd:string") | safe }}{% if not loop.last %}, {%endif%}{%- endfor %};
    {%- endif %}
    {%- if _.investigation_type %}
    sosa:isSampleOf {{_.investigation_type | ttl("xsd:string") | safe }} ;
    {%- endif %}
    {%- if _.tax_id %}
    sosa:isSampleOf {{_.tax_id | ttl("xsd:anyURI") | safe }} ;
    {%- endif %} {# scientific_name is name associated with this #}
    {%- if _.comm_samp %}
    sosa:isSampleOf {{ _.comm_samp | ttl("xsd:string") | safe }} ; 
    {%- endif %}

    {# people associated with this replicate sample #}
    prov:wasAssociatedWith [
        a prov:Person, schema:Person ;
        schema:name {{ _.sampl_person | ttl("xsd:string") | safe }} ;
        {%- if _.sampl_person_orcid %}
        schema:identifier {{_.sampl_person_orcid | ttl("xsd:anyURI") | safe }} ;
        {%- endif %}
    ] , [
        a prov:Person, schema:Person ;
        schema:name {{ _.store_person | ttl("xsd:string") | safe }} ;
        {%- if _.store_person_orcid %}
        schema:identifier {{_.store_person_orcid | ttl("xsd:anyURI") | safe }} ;
        {%- endif %}
    ] {% if _.other_person %}, [
        a prov:Person, schema:Person ;
        schema:name {{ _.other_person | ttl("xsd:string") | safe }} ;
        {%- if _.other_person_orcid %}
        schema:identifier {{_.other_person_orcid | ttl("xsd:anyURI") | safe }} ;
        {%- endif %}
    ] ; {% else %} ; {% endif %}

    {#- provenance part -- CASE 3: sample collected, stored locally, shipped & stored at HQ, shipped & stored at sequencing centre #}
    {%- if _.ship_date_seq and _.arr_date_seq %}
    prov:wasGeneratedBy [
        {#- storage at sequencing centre prov#}
        a prov:Activity ;
        dct:type "storage"^^xsd:string ; 
        dct:description "Storage of sample at sequencing centre for subsequent DNA sequencing"^^xsd:string ; 
        prov:startedAtTime {{ _.arr_date_seq | ttl("xsd:string") | safe }} ; {#ValueError: ISO string too short with xsd:date#}
        
        prov:wasInformedBy [
            {# transport from HMBRC HQ to sequencing centre prov#}
            a prov:Activity ;
            dct:type "transport"^^xsd:string ; 
            dct:description "Shipping of sample from HMBRC HQ to sequencing centre"^^xsd:string ; 
            prov:startedAtTime {{ _.ship_date_seq | ttl("xsd:string") | safe }} ;
            prov:endedAtTime {{ _.arr_date_seq | ttl("xsd:string") | safe }} ;
            
            prov:wasInformedBy [
                {# storage at HMBRC HQ prov#}
                a prov:Activity ;
                dct:type "storage"^^xsd:string ; 
                dct:description "Storage of sample at HMBRC HQ"^^xsd:string ; 
                prov:startedAtTime {{ _.arr_date_hq | ttl("xsd:string") | safe }} ;
                emobon:storageTemp {{ _.store_temp_hq | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}

                prov:wasInformedBy [
                    {# shipping to HMBRC HQ prov#}
                    a prov:Activity ;
                    dct:type "transport"^^xsd:string ; 
                    dct:description "Shipping of sample to HMBRC HQ"^^xsd:string ; 
                    prov:startedAtTime {{ _.ship_date | ttl("xsd:string") | safe }} ;
                    prov:endedAtTime {{ _.arr_date_hq | ttl("xsd:string") | safe }} ; {#note: column name might still change!#}
                    
                    prov:wasInformedBy [
                        {#- local storage sample prov #}
                        a prov:Activity ;
                        dct:type "storage"^^xsd:string ; 
                        dct:description "Local storage of the collected sample"^^xsd:string ; 
                        prov:startedAtTime {{ _.samp_store_date | ttl("xsd:string") | safe }} ;
                        prov:wasAssociatedWith [
                            prov:Person, schema:Person ;
                            schema:name {{ _.store_person | ttl("xsd:string") | safe }} ;
                        schema:identifier {{_.store_person_orcid | ttl("xsd:anyURI") | safe }} ;
                        ] ;
                        emobon:storageTemp {{ _.samp_store_temp | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
                        emobon:storageLoc {{ _.samp_store_loc | ttl("xsd:string") | safe }} ; 

                        prov:wasInformedBy <> ; 
                    ] ; 
                ] ; 
            ] ; 
        ] ; 
    ] ; 

    {#- CASE 2: sample collected, stored locally, shipped & stored at HQ #}
    {%- elif _.ship_date and _.arr_date_hq %}
    prov:wasGeneratedBy [
        {# storage at HMBRC HQ prov#}
        a prov:Activity ;
        dct:type "storage"^^xsd:string ; 
        dct:description "Storage of sample at HMBRC HQ"^^xsd:string ; 
        prov:startedAtTime {{ _.arr_date_hq | ttl("xsd:string") | safe }} ;
        {%- if _.store_temp_hq %}
        emobon:storageTemp {{ _.store_temp_hq | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
        {%- endif %}

        prov:wasInformedBy [
            {# shipping to HMBRC HQ prov#}
            a prov:Activity ;
            dct:type "transport"^^xsd:string ; 
            dct:description "Shipping of sample to HMBRC HQ"^^xsd:string ; 
            prov:startedAtTime {{ _.ship_date | ttl("xsd:string") | safe }} ;
            prov:endedAtTime {{ _.arr_date_hq | ttl("xsd:string") | safe }} ; {#note: column name might still change!#}
            
            prov:wasInformedBy [
                {#- local storage sample prov #}
                a prov:Activity ;
                dct:type "storage"^^xsd:string ; 
                dct:description "Local storage of the collected sample"^^xsd:string ; 
                prov:startedAtTime {{ _.samp_store_date | ttl("xsd:string") | safe }} ;
                prov:wasAssociatedWith [
                    prov:Person, schema:Person ;
                    schema:name {{ _.store_person | ttl("xsd:string") | safe }} ;
                    schema:identifier {{_.store_person_orcid | ttl("xsd:anyURI") | safe }} ;
                ] ;
                emobon:storageTemp {{ _.samp_store_temp | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
                emobon:storageLoc {{ _.samp_store_loc | ttl("xsd:string") | safe }} ; 

                prov:wasInformedBy <> ; 
            ] ; 
        ] ; 
    ] ;

    {#- provenance trail -- CASE 1: sample collected and shipped #}
    {%- elif _.ship_date %}
    prov:wasGeneratedBy [
        {# shipping to HMBRC HQ prov#}
        a prov:Activity ;
        dct:type "transport"^^xsd:string ; 
        dct:description "Shipping of sample to HMBRC HQ"^^xsd:string ; 
        prov:startedAtTime {{ _.ship_date | ttl("xsd:string") | safe }} ;

        prov:wasInformedBy [
            {#- local storage sample prov #}
            a prov:Activity ;
            dct:type "storage"^^xsd:string ; 
            dct:description "Local storage of the collected sample"^^xsd:string ; 
            {%- if _.samp_store_date %}
            prov:startedAtTime {{ _.samp_store_date | ttl("xsd:string") | safe }} ;
            {%- endif %}
            prov:wasAssociatedWith [
                prov:Person, schema:Person ;
                schema:name {{ _.store_person | ttl("xsd:string") | safe }} ;
            schema:identifier {{_.store_person_orcid | ttl("xsd:anyURI") | safe }} ;
            ] ;
            emobon:storageTemp {{ _.samp_store_temp | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
            emobon:storageLoc {{ _.samp_store_loc | ttl("xsd:string") | safe }} ; 

            prov:wasInformedBy <> ; 
        ] ; 
    ] ; 

    {#- provenance trail -- CASE 0: sample collected and stored locally #}
    {%- elif _.samp_store_date %}
    prov:wasGeneratedBy [
        {#- local storage sample prov #}
        a prov:Activity ;
        dct:type "storage"^^xsd:string ; 
        dct:description "Local storage of the collected sample"^^xsd:string ; 
        prov:startedAtTime {{ _.samp_store_date | ttl("xsd:string") | safe }} ;
        prov:wasAssociatedWith [
            prov:Person, schema:Person ;
            schema:name {{ _.store_person | ttl("xsd:string") | safe }} ;
        schema:identifier {{_.store_person_orcid | ttl("xsd:anyURI") | safe }} ;
        ] ;
        emobon:storageTemp {{ _.samp_store_temp | ttl("xsd:string") | safe }} ; {#mix of string and float|string#}
        emobon:storageLoc {{ _.samp_store_loc | ttl("xsd:string") | safe }} ; 

        prov:wasInformedBy <> ;
    ] ; 
    {%- else %}
    prov:wasGeneratedBy <> ;
    {%- endif %}
.

{% endfor %}